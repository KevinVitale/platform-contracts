name: CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: "us-east-2"
  CLUSTER_NAME: dev
  AWS_ACCOUNT_ID: ${{ secrets.NONPROD_AWS_ACCOUNT_ID }}
  ROLE_ARN: ${{ secrets.NONPROD_ROLE_ARN }}
  APP_NAME: contracts
  ECR_REPOSITORY: platform-contracts
  CONTAINER_PORT: "4000"
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  BUILD_VERSION: ${{ github.sha }}
  DEPLOY_TIMEOUT: "600"

jobs:
  cicd:
    name: CI/CD
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          submodules: true
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker build
        run: scripts/build-tools.sh docker-build
      # Tests disabled
      # - name: Integration test
      #   run: scripts/integration-test.sh
      - name: Docker push
        if: ${{ github.ref == 'refs/heads/master' }}
        run: scripts/build-tools.sh docker-push
      - name: Assume Role
        uses: youyo/awscredswrap@master
        with:
          role_arn: ${{ env.ROLE_ARN }}
      - name: ECS Deploy
        if: ${{ github.ref == 'refs/heads/master' }}
        env:
          IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.BUILD_VERSION }}
        run: |
          docker run \
            --env-file .env.deploy \
            -v ${PWD}/task-definition.tpl:/work/task-definition.tpl.json \
            dnxsolutions/ecs-deploy:1.1.1 /work/run-task.sh
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
