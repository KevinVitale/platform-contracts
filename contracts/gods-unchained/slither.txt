mint(address,uint16[],uint8[]) should be declared external:
        - S3PromoFactory.mint(address,uint16[],uint8[]) (factories/S3PromoFactory.sol#54-79)
mintSingle(address,uint16,uint8) should be declared external:
        - S3PromoFactory.mintSingle(address,uint16,uint8) (factories/S3PromoFactory.sol#82-101)
assignPromoMinter(address,uint16) should be declared external:
        - S3PromoFactory.assignPromoMinter(address,uint16) (factories/S3PromoFactory.sol#107-133)
lock(uint16) should be declared external:
        - S3PromoFactory.lock(uint16) (factories/S3PromoFactory.sol#135-154)
setChest(address) should be declared external:
        - Pack.setChest(address) (s1/pack/Pack.sol#74-80)
mint(uint256) should be declared external:
        - Pack.mint(uint256) (s1/pack/Pack.sol#86-100)
ticketsEscrowHook(uint256) should be declared external:
        - Pack.ticketsEscrowHook(uint256) (s1/pack/Pack.sol#180-201)
cardsEscrowHook(uint256) should be declared external:
        - Pack.cardsEscrowHook(uint256) (s1/pack/Pack.sol#203-224)
openChests(address,uint256) should be declared external:
        - Pack.openChests(address,uint256) (s1/pack/Pack.sol#303-322)
purchase(uint256,IPurchaseProcessor.PaymentParams,address) should be declared external:
        - S1Vendor.purchase(uint256,IPurchaseProcessor.PaymentParams,address) (s1/S1Vendor.sol#38-44)
setTradabilityStatus(bool) should be declared external:
        - GenericAsset.setTradabilityStatus(bool) (external/GenericAsset.sol#69-78)
setOracle(address) should be declared external:
        - PurchaseProcessor.setOracle(address) (@imtbl/platform/contracts/pay/PurchaseProcessor.sol#56-63)
setSignerLimit(address,uint256) should be declared external:
        - PurchaseProcessor.setSignerLimit(address,uint256) (@imtbl/platform/contracts/pay/PurchaseProcessor.sol#65-74)
setSellerApproval(address,bytes32[],bool) should be declared external:
        - PurchaseProcessor.setSellerApproval(address,bytes32[],bool) (@imtbl/platform/contracts/pay/PurchaseProcessor.sol#76-89)
process(IPurchaseProcessor.Order,IPurchaseProcessor.PaymentParams) should be declared external:
        - IPurchaseProcessor.process(IPurchaseProcessor.Order,IPurchaseProcessor.PaymentParams) (@imtbl/platform/contracts/pay/IPurchaseProcessor.sol#35)
        - PurchaseProcessor.process(IPurchaseProcessor.Order,IPurchaseProcessor.PaymentParams) (@imtbl/platform/contracts/pay/PurchaseProcessor.sol#96-149)
burn(uint256) should be declared external:
        - ERC20Burnable.burn(uint256) (@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol#17-19)
burnFrom(address,uint256) should be declared external:
        - ERC20Burnable.burnFrom(address,uint256) (@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol#24-26)
onERC721Received(address,address,uint256,bytes) should be declared external:
        - IERC721Receiver.onERC721Received(address,address,uint256,bytes) (@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#23-24)
fillOrders(LibOrder.Order[],uint256[],bytes[]) should be declared external:
        - Forwarder.fillOrders(LibOrder.Order[],uint256[],bytes[]) (Forwarder.sol#53-104)
mintMultiple(address[]) should be declared external:
        - RaffleItem.mintMultiple(address[]) (external/RaffleItem.sol#22-31)
mintTokens() should be declared external:
        - Chest.mintTokens() (s1/chest/Chest.sol#90-110)
open(uint256) should be declared external:
        - Chest.open(uint256) (s1/chest/Chest.sol#121-124)
available() should be declared external:
        - CappedVendor.available() (@imtbl/platform/contracts/pay/vendor/CappedVendor.sol#47-52)
fillOrKillOrder(LibOrder.Order,uint256,bytes) should be declared external:
        - IExchange.fillOrKillOrder(LibOrder.Order,uint256,bytes) (interfaces/IExchange.sol#27-33)
fillOrderNoThrow(LibOrder.Order,uint256,bytes) should be declared external:
        - IExchange.fillOrderNoThrow(LibOrder.Order,uint256,bytes) (interfaces/IExchange.sol#41-47)
batchFillOrders(LibOrder.Order[],uint256[],bytes[]) should be declared external:
        - IExchange.batchFillOrders(LibOrder.Order[],uint256[],bytes[]) (interfaces/IExchange.sol#54-60)
batchFillOrKillOrders(LibOrder.Order[],uint256[],bytes[]) should be declared external:
        - IExchange.batchFillOrKillOrders(LibOrder.Order[],uint256[],bytes[]) (interfaces/IExchange.sol#67-73)
batchFillOrdersNoThrow(LibOrder.Order[],uint256[],bytes[]) should be declared external:
        - IExchange.batchFillOrdersNoThrow(LibOrder.Order[],uint256[],bytes[]) (interfaces/IExchange.sol#81-87)
marketSellOrders(LibOrder.Order[],uint256,bytes[]) should be declared external:
        - IExchange.marketSellOrders(LibOrder.Order[],uint256,bytes[]) (interfaces/IExchange.sol#94-100)
marketSellOrdersNoThrow(LibOrder.Order[],uint256,bytes[]) should be declared external:
        - IExchange.marketSellOrdersNoThrow(LibOrder.Order[],uint256,bytes[]) (interfaces/IExchange.sol#108-114)
marketBuyOrders(LibOrder.Order[],uint256,bytes[]) should be declared external:
        - IExchange.marketBuyOrders(LibOrder.Order[],uint256,bytes[]) (interfaces/IExchange.sol#121-127)
marketBuyOrdersNoThrow(LibOrder.Order[],uint256,bytes[]) should be declared external:
        - IExchange.marketBuyOrdersNoThrow(LibOrder.Order[],uint256,bytes[]) (interfaces/IExchange.sol#135-141)
batchCancelOrders(LibOrder.Order[]) should be declared external:
        - IExchange.batchCancelOrders(LibOrder.Order[]) (interfaces/IExchange.sol#145-146)
getOrdersInfo(LibOrder.Order[]) should be declared external:
        - IExchange.getOrdersInfo(LibOrder.Order[]) (interfaces/IExchange.sol#151-154)
isValidSignature(bytes32,address,bytes) should be declared external:
        - IExchange.isValidSignature(bytes32,address,bytes) (interfaces/IExchange.sol#156-163)
transferBatch(address,address,uint256,uint256) should be declared external:
        - MultiTransfer.transferBatch(address,address,uint256,uint256) (token/MultiTransfer.sol#7-18)
transferAllFrom(address,address,uint256[]) should be declared external:
        - MultiTransfer.transferAllFrom(address,address,uint256[]) (token/MultiTransfer.sol#20-30)
safeTransferBatch(address,address,uint256,uint256) should be declared external:
        - MultiTransfer.safeTransferBatch(address,address,uint256,uint256) (token/MultiTransfer.sol#32-43)
safeTransferAllFrom(address,address,uint256[]) should be declared external:
        - MultiTransfer.safeTransferAllFrom(address,address,uint256[]) (token/MultiTransfer.sol#45-55)
addFactory(address,uint256) should be declared external:
        - Cards.addFactory(address,uint256) (Cards.sol#186-214)
approveForMythic(address,uint16) should be declared external:
        - Cards.approveForMythic(address,uint16) (Cards.sol#216-234)
makeMythicTradable(uint16) should be declared external:
        - Cards.makeMythicTradable(uint16) (Cards.sol#242-259)
unlockTrading(uint256) should be declared external:
        - Cards.unlockTrading(uint256) (Cards.sol#267-284)
burnAll(uint256[]) should be declared external:
        - Cards.burnAll(uint256[]) (Cards.sol#330-334)
getDetails(uint256) should be declared external:
        - Cards.getDetails(uint256) (Cards.sol#343-351)
startSeason(string,uint16,uint16) should be declared external:
        - Cards.startSeason(string,uint16,uint16) (Cards.sol#377-416)
updateProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[]) should be declared external:
        - Cards.updateProtos(uint16[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[],uint8[]) (Cards.sol#431-468)
lockProtos(uint16[]) should be declared external:
        - Cards.lockProtos(uint16[]) (Cards.sol#477-505)
setQuality(uint256,uint8) should be declared external:
        - Cards.setQuality(uint256,uint8) (Cards.sol#514-531)
setPropertyManager(address) should be declared external:
        - Cards.setPropertyManager(address) (Cards.sol#533-540)
setProperty(uint256,bytes32,bytes32) should be declared external:
        - Cards.setProperty(uint256,bytes32,bytes32) (Cards.sol#542-555)
setClassProperty(bytes32,bytes32) should be declared external:
        - Cards.setClassProperty(bytes32,bytes32) (Cards.sol#557-569)
batches(uint256) should be declared external:
        - ICards.batches(uint256) (interfaces/ICards.sol#12)
userIDToAddress(uint48) should be declared external:
        - ICards.userIDToAddress(uint48) (interfaces/ICards.sol#14)
getDetails(uint256) should be declared external:
        - ICards.getDetails(uint256) (interfaces/ICards.sol#16-24)
setQuality(uint256,uint8) should be declared external:
        - ICards.setQuality(uint256,uint8) (interfaces/ICards.sol#26-29)
mintCards(address,uint16[],uint8[]) should be declared external:
        - ICards.mintCards(address,uint16[],uint8[]) (interfaces/ICards.sol#31-37)
mintCard(address,uint16,uint8) should be declared external:
        - ICards.mintCard(address,uint16,uint8) (interfaces/ICards.sol#39-45)
burn(uint256) should be declared external:
        - ICards.burn(uint256) (interfaces/ICards.sol#47)
batchSize() should be declared external:
        - ICards.batchSize() (interfaces/ICards.sol#49-52)
setDestructionDelay(uint256) should be declared external:
        - CreditCardEscrow.setDestructionDelay(uint256) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#106-108)
setDestroyer(address) should be declared external:
        - CreditCardEscrow.setDestroyer(address) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#115-122)
setReleaseDelay(uint256) should be declared external:
        - CreditCardEscrow.setReleaseDelay(uint256) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#129-131)
setCustodian(address) should be declared external:
        - CreditCardEscrow.setCustodian(address) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#138-145)
release(uint256) should be declared external:
        - ICreditCardEscrow.release(uint256) (@imtbl/platform/contracts/escrow/releaser/ICreditCardEscrow.sol#13)
        - CreditCardEscrow.release(uint256) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#152-184)
requestRelease(uint256,address) should be declared external:
        - CreditCardEscrow.requestRelease(uint256,address) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#192-231)
        - ICreditCardEscrow.requestRelease(uint256,address) (@imtbl/platform/contracts/escrow/releaser/ICreditCardEscrow.sol#21)
cancelRelease(uint256) should be declared external:
        - ICreditCardEscrow.cancelRelease(uint256) (@imtbl/platform/contracts/escrow/releaser/ICreditCardEscrow.sol#28)
        - CreditCardEscrow.cancelRelease(uint256) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#238-261)
requestDestruction(uint256) should be declared external:
        - ICreditCardEscrow.requestDestruction(uint256) (@imtbl/platform/contracts/escrow/releaser/ICreditCardEscrow.sol#35)
        - CreditCardEscrow.requestDestruction(uint256) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#268-296)
cancelDestruction(uint256) should be declared external:
        - ICreditCardEscrow.cancelDestruction(uint256) (@imtbl/platform/contracts/escrow/releaser/ICreditCardEscrow.sol#42)
        - CreditCardEscrow.cancelDestruction(uint256) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#303-320)
destroy(uint256) should be declared external:
        - ICreditCardEscrow.destroy(uint256) (@imtbl/platform/contracts/escrow/releaser/ICreditCardEscrow.sol#49)
        - CreditCardEscrow.destroy(uint256) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#327-347)
callbackEscrow(IEscrow.Vault,address,bytes,uint256,uint256) should be declared external:
        - CreditCardEscrow.callbackEscrow(IEscrow.Vault,address,bytes,uint256,uint256) (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#358-382)
        - ICreditCardEscrow.callbackEscrow(IEscrow.Vault,address,bytes,uint256,uint256) (@imtbl/platform/contracts/escrow/releaser/ICreditCardEscrow.sol#60-66)
getProtocol() should be declared external:
        - ICreditCardEscrow.getProtocol() (@imtbl/platform/contracts/escrow/releaser/ICreditCardEscrow.sol#68)
        - CreditCardEscrow.getProtocol() (@imtbl/platform/contracts/escrow/releaser/CreditCardEscrow.sol#384-386)
tokenOfOwnerByIndex(address,uint256) should be declared external:
        - IERC721Enumerable.tokenOfOwnerByIndex(address,uint256) (@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#11)
        - ERC721Enumerable.tokenOfOwnerByIndex(address,uint256) (@openzeppelin/contracts/token/ERC721/ERC721Enumerable.sol#48-51)
tokenByIndex(uint256) should be declared external:
        - ERC721Enumerable.tokenByIndex(uint256) (@openzeppelin/contracts/token/ERC721/ERC721Enumerable.sol#67-70)
        - IERC721Enumerable.tokenByIndex(uint256) (@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol#13)
forge(uint256[]) should be declared external:
        - Forge.forge(uint256[]) (factories/Forge.sol#22-70)
setLock(bool) should be declared external:
        - Forge.setLock(bool) (factories/Forge.sol#72-78)
recommit(uint256,uint256) should be declared external:
        - IBeacon.recommit(uint256,uint256) (@imtbl/platform/contracts/randomness/IBeacon.sol#6)
        - Beacon.recommit(uint256,uint256) (@imtbl/platform/contracts/randomness/Beacon.sol#78-94)
randomness(uint256) should be declared external:
        - Beacon.randomness(uint256) (@imtbl/platform/contracts/randomness/Beacon.sol#63-69)
        - IBeacon.randomness(uint256) (@imtbl/platform/contracts/randomness/IBeacon.sol#7)
approve(address,uint256) should be declared external:
        - BatchToken.approve(address,uint256) (token/BatchToken.sol#183-198)
        - ERC721.approve(address,uint256) (@openzeppelin/contracts/token/ERC721/ERC721.sol#88-98)
        - IERC721.approve(address,uint256) (@openzeppelin/contracts/token/ERC721/IERC721.sol#45)
setApprovalForAll(address,bool) should be declared external:
        - ERC721.setApprovalForAll(address,bool) (@openzeppelin/contracts/token/ERC721/ERC721.sol#118-123)
        - IERC721.setApprovalForAll(address,bool) (@openzeppelin/contracts/token/ERC721/IERC721.sol#48)
getProperty(uint256,bytes32) should be declared external:
        - InscribableToken.getProperty(uint256,bytes32) (token/InscribableToken.sol#29-38)
getClassProperty(bytes32) should be declared external:
        - InscribableToken.getClassProperty(bytes32) (token/InscribableToken.sol#71-77)
mint(address,uint16[],uint8[]) should be declared external:
        - PromoFactory.mint(address,uint16[],uint8[]) (factories/PromoFactory.sol#70-96)
mintSingle(address,uint16,uint8) should be declared external:
        - PromoFactory.mintSingle(address,uint16,uint8) (factories/PromoFactory.sol#105-124)
validMinters(uint16) should be declared external:
        - PromoFactory.validMinters(uint16) (factories/PromoFactory.sol#131-139)
isPromoLocked(uint16) should be declared external:
        - PromoFactory.isPromoLocked(uint16) (factories/PromoFactory.sol#170-178)
getAdminMinters() should be declared external:
        - PromoFactory.getAdminMinters() (factories/PromoFactory.sol#183-185)
addAdminMinter(address) should be declared external:
        - PromoFactory.addAdminMinter(address) (factories/PromoFactory.sol#197-206)
removeAdminMinter(address) should be declared external:
        - PromoFactory.removeAdminMinter(address) (factories/PromoFactory.sol#213-230)
adminMintCards(address,uint16[],uint8[]) should be declared external:
        - PromoFactory.adminMintCards(address,uint16[],uint8[]) (factories/PromoFactory.sol#239-253)
addPromoMinter(address,uint16) should be declared external:
        - PromoFactory.addPromoMinter(address,uint16) (factories/PromoFactory.sol#261-277)
removePromoMinter(address,uint16) should be declared external:
        - PromoFactory.removePromoMinter(address,uint16) (factories/PromoFactory.sol#285-316)
lock(uint16) should be declared external:
        - PromoFactory.lock(uint16) (factories/PromoFactory.sol#323-342)
setMinterApproval(address,bool) should be declared external:
        - Raffle.setMinterApproval(address,bool) (s1/raffle/Raffle.sol#18-21)
mint(address,uint256) should be declared external:
        - Raffle.mint(address,uint256) (s1/raffle/Raffle.sol#23-29)
callbackEscrow(IEscrow.Vault,address,bytes) should be declared external:
        - IEscrow.callbackEscrow(IEscrow.Vault,address,bytes) (@imtbl/platform/contracts/escrow/IEscrow.sol#23-27)
        - Escrow.callbackEscrow(IEscrow.Vault,address,bytes) (@imtbl/platform/contracts/escrow/Escrow.sol#39-121)
escrow(IEscrow.Vault,address) should be declared external:
        - Escrow.escrow(IEscrow.Vault,address) (@imtbl/platform/contracts/escrow/Escrow.sol#129-174)
        - IEscrow.escrow(IEscrow.Vault,address) (@imtbl/platform/contracts/escrow/IEscrow.sol#35)
release(uint256,address) should be declared external:
        - IEscrow.release(uint256,address) (@imtbl/platform/contracts/escrow/IEscrow.sol#43)
        - Escrow.release(uint256,address) (@imtbl/platform/contracts/escrow/Escrow.sol#182-208)
withdraw(uint256) should be declared external:
        - WETH9.withdraw(uint256) (token/EtherToken.sol#44-49)
totalSupply() should be declared external:
        - WETH9.totalSupply() (token/EtherToken.sol#51-53)
approve(address,uint256) should be declared external:
        - WETH9.approve(address,uint256) (token/EtherToken.sol#55-59)
transfer(address,uint256) should be declared external:
        - WETH9.transfer(address,uint256) (token/EtherToken.sol#61-63)
addMinter(address) should be declared external:
        - Fusing.addMinter(address) (factories/Fusing.sol#51-60)
removeMinter(address) should be declared external:
        - Fusing.removeMinter(address) (factories/Fusing.sol#67-77)
fuse(uint16,uint8,address,uint256[]) should be declared external:
        - Fusing.fuse(uint16,uint8,address,uint256[]) (factories/Fusing.sol#87-118)
isApprovedMinter(address) should be declared external:
        - Fusing.isApprovedMinter(address) (factories/Fusing.sol#125-133)
name() should be declared external:
        - ERC20Detailed.name() (@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol#27-29)
symbol() should be declared external:
        - ERC20Detailed.symbol() (@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol#35-37)
decimals() should be declared external:
        - ERC20Detailed.decimals() (@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol#51-53)
getBatch(uint256) should be declared external:
        - BatchToken.getBatch(uint256) (token/BatchToken.sol#103-105)
totalSupply() should be declared external:
        - BatchToken.totalSupply() (token/BatchToken.sol#221-227)
deposit() should be declared external:
        - IEtherToken.deposit() (interfaces/IEtherToken.sol#4)
withdraw(uint256) should be declared external:
        - IEtherToken.withdraw(uint256) (interfaces/IEtherToken.sol#5)
withdrawTo(address,uint256) should be declared external:
        - IEtherToken.withdrawTo(address,uint256) (interfaces/IEtherToken.sol#6)
mintCards(address,uint16[],uint8[]) should be declared external:
        - OpenMinter.mintCards(address,uint16[],uint8[]) (factories/OpenMinter.sol#13-15)
mintMultiple(address[],uint8[]) should be declared external:
        - GenesisBoard.mintMultiple(address[],uint8[]) (external/GenesisBoard.sol#31-41)
getBoardLevel(uint256) should be declared external:
        - GenesisBoard.getBoardLevel(uint256) (external/GenesisBoard.sol#73-81)
owner() should be declared external:
        - Ownable.owner() (@openzeppelin/contracts/ownership/Ownable.sol#29-31)
renounceOwnership() should be declared external:
        - Ownable.renounceOwnership() (@openzeppelin/contracts/ownership/Ownable.sol#55-58)
transferOwnership(address) should be declared external:
        - Ownable.transferOwnership(address) (@openzeppelin/contracts/ownership/Ownable.sol#64-66)
totalSupply() should be declared external:
        - ERC20.totalSupply() (@openzeppelin/contracts/token/ERC20/ERC20.sol#43-45)
balanceOf(address) should be declared external:
        - ERC20.balanceOf(address) (@openzeppelin/contracts/token/ERC20/ERC20.sol#50-52)
allowance(address,address) should be declared external:
        - ERC20.allowance(address,address) (@openzeppelin/contracts/token/ERC20/ERC20.sol#70-72)
approve(address,uint256) should be declared external:
        - ERC20.approve(address,uint256) (@openzeppelin/contracts/token/ERC20/ERC20.sol#81-84)
increaseAllowance(address,uint256) should be declared external:
        - ERC20.increaseAllowance(address,uint256) (@openzeppelin/contracts/token/ERC20/ERC20.sol#116-119)
decreaseAllowance(address,uint256) should be declared external:
        - ERC20.decreaseAllowance(address,uint256) (@openzeppelin/contracts/token/ERC20/ERC20.sol#135-138)
mintMultiple(address[],uint8[]) should be declared external:
        - HydraTrinket.mintMultiple(address[],uint8[]) (external/HydraTrinket.sol#25-35)
getHeadsOfHydra(uint256) should be declared external:
        - HydraTrinket.getHeadsOfHydra(uint256) (external/HydraTrinket.sol#65-73)
purchase(S1Sale.ProductPurchaseRequest[],address) should be declared external:
        - S1Sale.purchase(S1Sale.ProductPurchaseRequest[],address) (s1/S1Sale.sol#20-25)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-as-external
INFO:Slither:. analyzed (75 contracts with 46 detectors), 467 result(s) found